{"version":3,"sources":["images/item0.png","Components/Timer/index.js","Components/Item/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ExpTimer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","expiration_date","milisecsRemaining","isOver","time","countDown","bind","assertThisInitialized","setInterval","setState","cur_date","Date","exp_date","milis","hours","parseInt","slice","mins","react_default","a","createElement","Alert","color","className","renderRemainingTime","startTimer","prevState","React","Component","Item","Col","sm","xs","lg","Card","body","inverse","style","backgroundColor","borderColor","CardImg","top","width","src","image","alt","iname","CardBody","CardTitle","CardText","description","library","add","faShoppingCart","image0","require","App","items","id","name","array","i","length","push","Item_Item","key","String","marginTop","marginBottom","Row","xl","Timer_ExpTimer","renderElemets","Button","size","href","react_fontawesome_index_es","icon","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97443039.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/item0.a4631a72.png\";","import React from 'react';\nimport './style.css'\nimport Alert from \"reactstrap/es/Alert\";\n\nexport default class ExpTimer extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state={\n            expiration_date: 1558344909061,\n            milisecsRemaining: 0,\n            isOver:false,\n            time: {}\n        };\n        this.countDown  = this.countDown.bind(this)\n\n    }\n    startTimer(){\n        setInterval(this.countDown,500);\n    }\n\n    countDown() {\n        let milisecsRemaining = this.state.milisecsRemaining - 500;\n        this.setState({\n            milisecsRemaining: milisecsRemaining,\n        });\n\n        if (milisecsRemaining < 900) {\n            this.setState({isOver:true})\n\n        }\n    }\n\n    componentWillMount() {\n        let cur_date = new Date();\n        let exp_date = new Date(2019, 5,29,23,59,59);\n\n        let milisecsRemaining = exp_date-cur_date;\n        this.setState({\n            expiration_date: exp_date,\n            milisecsRemaining: exp_date-cur_date\n\n        })\n        if (milisecsRemaining < 900) {\n            this.setState({isOver:true})\n\n        }\n\n    }\n    renderRemainingTime(milis){\n        let hours = (\"0\"+parseInt(milis/(60*1000*60))).slice(-2);\n        let mins = (\"0\"+parseInt((milis-hours*60*1000*60)/(60*1000))).slice(-2);\n        let secs = (\"0\"+parseInt((milis-hours*60*1000*60-mins*60*1000)/1000)).slice(-2);\n        return hours+\":\"+mins+\":\"+secs\n    }\n    render() {\n        if (this.state.isOver){\n            return (\n                <Alert color={\"success\"}  className={\"text-center\"}>\n                    <h5 className={\"text-center\"}>Our shop was closed</h5>\n                </Alert>\n\n            );\n        } else {\n            return (\n                <Alert color={\"danger\"}  className={\"text-center\"}>\n                    <h5 className={\"text-center\"}>Our shop will be closed in</h5>\n                    <h4>{this.renderRemainingTime(this.state.milisecsRemaining)}</h4>\n                </Alert>\n\n            );\n        }\n\n    }\n    componentDidMount() {\n        this.startTimer()\n    }\n\n    componentDidUpdate(prevState) {\n        if (prevState.milisecsRemaining!==this.state.milisecsRemaining){\n        }\n    }\n}\n","import React from 'react';\nimport './style.css'\nimport Col from \"reactstrap/es/Col\";\n\nimport Card from \"reactstrap/es/Card\";\nimport CardImg from \"reactstrap/es/CardImg\";\nimport CardBody from \"reactstrap/es/CardBody\";\nimport CardText from \"reactstrap/es/CardText\";\nimport CardTitle from \"reactstrap/es/CardTitle\";\n\n\n\n\nexport default class Item extends React.Component {\n\n\n\n    render() {\n        return (\n            <Col sm={\"4\"} xs={\"12\"} lg={\"3\"}>\n                <Card className={\"text-center\"} body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\n                    <CardImg top width=\"50%\" src={this.props.image} alt={this.props.iname} />\n                    <CardBody>\n                        <CardTitle>{this.props.iname}</CardTitle>\n                        <CardText>{this.props.description}</CardText>\n                    </CardBody>\n                </Card>\n\n            </Col>\n\n        );\n    }\n}\n","import React from 'react';\nimport './style.css'\nimport ExpTimer from \"./Components/Timer\";\nimport Row from \"reactstrap/es/Row\";\nimport Col from \"reactstrap/es/Col\";\nimport Button from \"reactstrap/es/Button\";\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {faShoppingCart} from '@fortawesome/free-solid-svg-icons'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Item from \"./Components/Item\";\nlibrary.add(faShoppingCart);\n\nconst image0 = require('./images/item0.png');\n\n\nexport default class App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state={\n        items: [\n            {id:0, name: \"A Math Bow Tie\", image:image0, description:\"An elegant bow tie for a smart guy.\"},\n        ]\n    }\n\n  }\n\n  componentDidMount() {\n\n  }\n\n  renderElemets(array){\n      const items = [];\n      for (let i=0; i < array.length; i++) {\n          items.push(<Item key={\"item\"+array[i].id} iname={array[i].name} image={String(array[i].image)} description={array[i].description}/>)\n\n      }\n      return items;\n\n  }\n\n  render() {\n    return (\n        <div className={\"App-container\"}>\n            <div className={\"content-container\"}>\n                <h1 className={\"text-center\"} style={{marginTop: \"8px\",marginBottom: \"32px\", color: \"white\" }}><b>Sciencishbowties showroom</b></h1>\n                <Row>\n                    <Col/>\n                    <Col xl={\"6\"} sm={\"12\"}>\n                        <ExpTimer/>\n                    </Col>\n                    <Col/>\n                </Row>\n                <Row>\n                    <Col/>\n\n                    {this.renderElemets(this.state.items)}\n                    <Col/>\n\n                </Row>\n                <Row style={{marginTop:\"32px\"}}>\n                    <Col/>\n                    <Col xl={\"6\"} sm={\"12\"} className={\"text-center\"}>\n                        <Button size={\"lg\"} color={\"primary\"} href={\"https://vk.com/market-183933258\"}><FontAwesomeIcon icon={\"shopping-cart\"} style={{marginRight: \"8px\"}}/>Start shopping!</Button>\n                    </Col>\n                    <Col/>\n                </Row>\n\n            </div>\n\n\n        </div>\n\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}